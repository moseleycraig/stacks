<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Guardian Gateway - Bitcoin Oracle Protocol</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Red+Hat+Display:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Red Hat Display', sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            color: white;
            min-height: 100vh;
            line-height: 1.6;
        }

        .header {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 2rem;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: #00aaff;
            text-decoration: none;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }

        .nav-links a:hover, .nav-links a.active {
            opacity: 1;
            color: #FF3300;
        }

        .wallet-connect {
            background: linear-gradient(45deg, #00aaff, #0077cc);
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Red Hat Display', sans-serif;
        }

        .wallet-connect:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 170, 255, 0.3);
        }

        .wallet-connect.connected {
            background: linear-gradient(45deg, #28a745, #20c997);
        }

        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 3rem;
            min-height: calc(100vh - 100px);
        }

        .oracle-dashboard {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
            height: fit-content;
        }

        .dashboard-header {
            margin-bottom: 2rem;
        }

        .dashboard-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #00aaff, #ffffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .dashboard-subtitle {
            opacity: 0.7;
            font-size: 0.9rem;
        }

        .price-feeds-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .price-feed-card {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
        }

        .price-feed-card:hover {
            background: rgba(255, 255, 255, 0.08);
            transform: translateY(-2px);
        }

        .asset-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .asset-name {
            font-weight: 600;
            font-size: 1.1rem;
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            background: #28a745;
            border-radius: 50%;
            animation: pulse-status 2s infinite;
        }

        @keyframes pulse-status {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .price-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #00aaff;
            margin-bottom: 0.5rem;
        }

        .confidence-score {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .confidence-bar {
            width: 100%;
            height: 4px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
            margin-top: 0.5rem;
            overflow: hidden;
        }

        .confidence-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #ffd93d, #6bcf7f);
            border-radius: 2px;
            transition: width 0.3s ease;
        }

        .network-status {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            text-align: center;
        }

        .status-item {
            padding: 0.5rem;
        }

        .status-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #00aaff;
        }

        .status-label {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-top: 0.25rem;
        }

        .oracle-operations {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .operation-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
        }

        .operation-header {
            margin-bottom: 1.5rem;
        }

        .operation-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .operation-description {
            opacity: 0.7;
            font-size: 0.9rem;
            line-height: 1.5;
        }

        .tabs {
            display: flex;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 0.25rem;
        }

        .tab {
            flex: 1;
            padding: 0.75rem;
            text-align: center;
            background: none;
            border: none;
            color: white;
            font-family: 'Red Hat Display', sans-serif;
            font-weight: 500;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.3s ease;
            opacity: 0.6;
        }

        .tab.active {
            background: linear-gradient(45deg, #00aaff, #0077cc);
            opacity: 1;
        }

        .tab:hover {
            opacity: 0.8;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            opacity: 0.9;
        }

        .form-input, .form-select {
            width: 100%;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            color: white;
            font-family: 'Red Hat Display', sans-serif;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus, .form-select:focus {
            outline: none;
            border-color: #00aaff;
            box-shadow: 0 0 0 3px rgba(0, 170, 255, 0.1);
        }

        .form-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .form-select option {
            background: #1a1a2e;
            color: white;
        }

        .btn-primary {
            width: 100%;
            padding: 1rem 2rem;
            background: linear-gradient(45deg, #00aaff, #0077cc);
            border: none;
            border-radius: 12px;
            color: white;
            font-family: 'Red Hat Display', sans-serif;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 170, 255, 0.3);
        }

        .btn-primary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .submission-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .form-row-full {
            grid-column: 1 / -1;
        }

        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }

        .transaction-item:hover {
            background: rgba(255, 255, 255, 0.08);
        }

        .transaction-details {
            flex: 1;
        }

        .transaction-type {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .transaction-time {
            font-size: 0.8rem;
            opacity: 0.6;
        }

        .transaction-link {
            color: #00aaff;
            font-size: 0.75rem;
            text-decoration: none;
        }

        .transaction-link:hover {
            text-decoration: underline;
        }

        .transaction-status {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-confirmed {
            background: rgba(40, 167, 69, 0.2);
            color: #28a745;
            border: 1px solid rgba(40, 167, 69, 0.3);
        }

        .status-pending {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid rgba(255, 193, 7, 0.3);
        }

        .validation-layers {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 0.5rem;
            margin: 1rem 0;
        }

        .validation-layer {
            aspect-ratio: 1;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .validation-layer.passed {
            background: rgba(40, 167, 69, 0.2);
            border-color: #28a745;
            color: #28a745;
        }

        .validation-layer.processing {
            background: rgba(255, 193, 7, 0.2);
            border-color: #ffc107;
            color: #ffc107;
            animation: pulse-validation 1s infinite;
        }

        @keyframes pulse-validation {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.6; }
        }

        .bond-requirements {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .bond-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .bond-item:last-child {
            margin-bottom: 0;
        }

        .bond-label {
            font-weight: 500;
        }

        .bond-amount {
            font-weight: 700;
            color: #00aaff;
        }

        .integration-grid {
            display: grid;
            gap: 1rem;
        }

        .integration-card {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
        }

        .integration-card:hover {
            background: rgba(255, 255, 255, 0.08);
            transform: translateY(-2px);
        }

        .integration-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .integration-name {
            font-weight: 600;
            font-size: 1.1rem;
        }

        .integration-status {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            background: rgba(40, 167, 69, 0.2);
            color: #28a745;
            border: 1px solid rgba(40, 167, 69, 0.3);
        }

        .integration-metrics {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-top: 1rem;
        }

        .metric {
            text-align: center;
        }

        .metric-value {
            font-size: 1.2rem;
            font-weight: 700;
            color: #00aaff;
        }

        .metric-label {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-top: 0.25rem;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #00aaff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .message.success {
            background: rgba(40, 167, 69, 0.2);
            color: #28a745;
            border: 1px solid rgba(40, 167, 69, 0.3);
        }

        .message.error {
            background: rgba(220, 53, 69, 0.2);
            color: #dc3545;
            border: 1px solid rgba(220, 53, 69, 0.3);
        }

        .message.warning {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid rgba(255, 193, 7, 0.3);
        }

        @media (max-width: 1200px) {
            .main-container {
                grid-template-columns: 1fr;
                gap: 2rem;
            }
        }

        @media (max-width: 768px) {
            .nav-container {
                padding: 0 1rem;
                flex-direction: column;
                gap: 1rem;
            }
            .price-feeds-grid {
                grid-template-columns: 1fr;
            }
            .submission-form {
                grid-template-columns: 1fr;
            }
            .status-grid {
                grid-template-columns: 1fr;
            }
            .validation-layers {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>

<body>
    <header class="header">
        <nav class="nav-container">
            <a href="#" class="logo">Guardian Gateway</a>
            <div class="nav-links">
                <a href="#dashboard" class="active">Dashboard</a>
                <a href="#oracle">Oracle</a>
                <a href="#integrations">Integrations</a>
                <a href="#governance">Governance</a>
            </div>
            <button class="wallet-connect" id="walletConnect">
                Connect Wallet
            </button>
        </nav>
    </header>

    <div class="main-container">
        <div class="oracle-dashboard">
            <div class="dashboard-header">
                <h1 class="dashboard-title">Oracle Dashboard</h1>
                <p class="dashboard-subtitle">Real-time Bitcoin-anchored price feeds with 8-layer validation</p>
            </div>

            <div class="price-feeds-grid">
                <div class="price-feed-card">
                    <div class="asset-header">
                        <span class="asset-name">Bitcoin (BTC)</span>
                        <div class="status-indicator"></div>
                    </div>
                    <div class="price-value" id="btc-price">$50,000.00</div>
                    <div class="confidence-score">Confidence: <span id="btc-confidence">95%</span></div>
                    <div class="confidence-bar">
                        <div class="confidence-fill" style="width: 95%"></div>
                    </div>
                </div>

                <div class="price-feed-card">
                    <div class="asset-header">
                        <span class="asset-name">Ethereum (ETH)</span>
                        <div class="status-indicator"></div>
                    </div>
                    <div class="price-value" id="eth-price">$3,000.00</div>
                    <div class="confidence-score">Confidence: <span id="eth-confidence">93%</span></div>
                    <div class="confidence-bar">
                        <div class="confidence-fill" style="width: 93%"></div>
                    </div>
                </div>

                <div class="price-feed-card">
                    <div class="asset-header">
                        <span class="asset-name">USDC</span>
                        <div class="status-indicator"></div>
                    </div>
                    <div class="price-value" id="usdc-price">$1.00</div>
                    <div class="confidence-score">Confidence: <span id="usdc-confidence">99%</span></div>
                    <div class="confidence-bar">
                        <div class="confidence-fill" style="width: 99%"></div>
                    </div>
                </div>

                <div class="price-feed-card">
                    <div class="asset-header">
                        <span class="asset-name">STAX</span>
                        <div class="status-indicator"></div>
                    </div>
                    <div class="price-value" id="stax-price">$1.50</div>
                    <div class="confidence-score">Confidence: <span id="stax-confidence">90%</span></div>
                    <div class="confidence-bar">
                        <div class="confidence-fill" style="width: 90%"></div>
                    </div>
                </div>
            </div>

            <div class="network-status">
                <h3 style="margin-bottom: 1rem; font-weight: 600;">Network Status</h3>
                <div class="status-grid">
                    <div class="status-item">
                        <div class="status-value" id="active-oracles">5</div>
                        <div class="status-label">Active Oracles</div>
                    </div>
                    <div class="status-item">
                        <div class="status-value" id="consensus-rounds">144</div>
                        <div class="status-label">Consensus Rounds</div>
                    </div>
                    <div class="status-item">
                        <div class="status-value" id="btc-confirmations">6</div>
                        <div class="status-label">BTC Confirmations</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="oracle-operations">
            <div class="operation-card">
                <div class="operation-header">
                    <h2 class="operation-title">Oracle Operations</h2>
                    <p class="operation-description">Submit price data, manage oracle operations, and monitor validation status</p>
                </div>

                <div class="tabs">
                    <button class="tab active" onclick="switchTab('submit')">Submit Data</button>
                    <button class="tab" onclick="switchTab('register')">Register Oracle</button>
                    <button class="tab" onclick="switchTab('history')">History</button>
                </div>

                <div id="submit-tab" class="tab-content">
                    <div class="message warning">
                        <strong>Bootstrap Mode:</strong> Currently operating with reduced requirements for early testing.
                    </div>

                    <div class="submission-form">
                        <div class="form-group">
                            <label class="form-label">Asset</label>
                            <select class="form-select" id="asset-select">
                                <option value="BTC">Bitcoin (BTC)</option>
                                <option value="ETH">Ethereum (ETH)</option>
                                <option value="USDC">USDC</option>
                                <option value="STAX">STAX</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Price (USD)</label>
                            <input type="number" class="form-input" id="price-input" placeholder="50000.00" step="0.01">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Confidence (%)</label>
                            <input type="number" class="form-input" id="confidence-input" placeholder="95" min="0" max="100">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Bitcoin Block Hash</label>
                            <input type="text" class="form-input" id="block-hash-input" placeholder="0x000000000000000...">
                        </div>

                        <div class="form-group form-row-full">
                            <label class="form-label">VAA Payload (Hex)</label>
                            <input type="text" class="form-input" id="vaa-input" placeholder="Enter Wormhole VAA payload...">
                        </div>
                    </div>

                    <div style="margin: 2rem 0;">
                        <h4 style="margin-bottom: 1rem; font-weight: 600;">8-Layer Validation Progress</h4>
                        <div class="validation-layers">
                            <div class="validation-layer" id="layer-1">1</div>
                            <div class="validation-layer" id="layer-2">2</div>
                            <div class="validation-layer" id="layer-3">3</div>
                            <div class="validation-layer" id="layer-4">4</div>
                            <div class="validation-layer" id="layer-5">5</div>
                            <div class="validation-layer" id="layer-6">6</div>
                            <div class="validation-layer" id="layer-7">7</div>
                            <div class="validation-layer" id="layer-8">8</div>
                        </div>
                        <p style="font-size: 0.8rem; opacity: 0.7; margin-top: 0.5rem;">
                            Layers: VAA Verification → Pyth Integration → Consensus → Bitcoin Validation → Confidence → Time Window → Deviation → BTC Confirmation
                        </p>
                    </div>

                    <button class="btn-primary" id="submit-data-btn" onclick="submitOracleData()">
                        Submit Oracle Data
                    </button>
                </div>

                <div id="register-tab" class="tab-content" style="display: none;">
                    <div class="message warning">
                        <strong>Bootstrap Program:</strong> Reduced bond requirements for early oracle operators.
                    </div>

                    <div class="bond-requirements">
                        <h4 style="margin-bottom: 1rem; font-weight: 600;">Bond Requirements</h4>
                        <div class="bond-item">
                            <span class="bond-label">STX Bond (Bootstrap)</span>
                            <span class="bond-amount">1,000 STX</span>
                        </div>
                        <div class="bond-item">
                            <span class="bond-label">BTC Bond (Bootstrap)</span>
                            <span class="bond-amount">0.01 BTC</span>
                        </div>
                        <div class="bond-item">
                            <span class="bond-label">Production STX Bond</span>
                            <span class="bond-amount">10,000 STX</span>
                        </div>
                        <div class="bond-item">
                            <span class="bond-label">Production BTC Bond</span>
                            <span class="bond-amount">0.1 BTC</span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Oracle Address</label>
                        <input type="text" class="form-input" id="oracle-address" placeholder="SP1ABC..." readonly>
                    </div>

                    <div class="submission-form">
                        <div class="form-group">
                            <label class="form-label">STX Bond Amount</label>
                            <input type="number" class="form-input" id="stx-bond" placeholder="1000" min="1000">
                        </div>

                        <div class="form-group">
                            <label class="form-label">BTC Bond Amount</label>
                            <input type="number" class="form-input" id="btc-bond" placeholder="0.01" min="0.01" step="0.01">
                        </div>
                    </div>

                    <button class="btn-primary" id="register-oracle-btn" onclick="registerOracle()">
                        Register as Oracle Operator
                    </button>
                </div>

                <div id="history-tab" class="tab-content" style="display: none;">
                    <div id="transaction-history">
                        <div class="transaction-item">
                            <div class="transaction-details">
                                <div class="transaction-type">Price Submission - BTC</div>
                                <div class="transaction-time">2 minutes ago</div>
                            </div>
                            <div class="transaction-status status-pending">Validating</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="operation-card">
                <div class="operation-header">
                    <h2 class="operation-title">DeFi Integrations</h2>
                    <p class="operation-description">Monitor protocol integrations and their usage of Guardian Gateway price feeds</p>
                </div>

                <div class="integration-grid">
                    <div class="integration-card">
                        <div class="integration-header">
                            <span class="integration-name">ALEX Lab</span>
                            <div class="integration-status">Active</div>
                        </div>
                        <p style="font-size: 0.9rem; opacity: 0.8; margin-bottom: 1rem;">
                            AMM trading with Bitcoin-grade price feeds and slippage protection
                        </p>
                        <div class="integration-metrics">
                            <div class="metric">
                                <div class="metric-value">1,247</div>
                                <div class="metric-label">API Calls Today</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value">99.8%</div>
                                <div class="metric-label">Uptime</div>
                            </div>
                        </div>
                    </div>

                    <div class="integration-card">
                        <div class="integration-header">
                            <span class="integration-name">Velar</span>
                            <div class="integration-status">Active</div>
                        </div>
                        <p style="font-size: 0.9rem; opacity: 0.8; margin-bottom: 1rem;">
                            Leverage trading with mathematical security guarantees
                        </p>
                        <div class="integration-metrics">
                            <div class="metric">
                                <div class="metric-value">892</div>
                                <div class="metric-label">API Calls Today</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value">99.9%</div>
                                <div class="metric-label">Uptime</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Simplified Stacks Wallet API - No external libraries needed
        const StacksWallet = {
            async connect() {
                // Check for Leather wallet
                if (window.LeatherProvider) {
                    const resp = await window.LeatherProvider.request('getAddresses');
                    return {
                        address: resp.result.addresses.find(a => a.type === 'stx').address,
                        provider: 'Leather'
                    };
                }
                // Check for Xverse wallet  
                else if (window.XverseProviders?.StacksProvider) {
                    const resp = await window.XverseProviders.StacksProvider.request('getAddresses', null);
                    return {
                        address: resp.result.addresses.find(a => a.type === 'stx').address,
                        provider: 'Xverse'
                    };
                }
                else {
                    throw new Error('No Stacks wallet found. Please install Leather or Xverse extension.');
                }
            },
            
            async callContract(contractAddress, contractName, functionName, functionArgs, network = 'testnet') {
                const txOptions = {
                    contractAddress,
                    contractName,
                    functionName,
                    functionArgs,
                    network,
                    postConditions: []
                };
                
                if (window.LeatherProvider) {
                    return await window.LeatherProvider.request('callContract', txOptions);
                } else if (window.XverseProviders?.StacksProvider) {
                    return await window.XverseProviders.StacksProvider.request('callContract', txOptions);
                }
            },
            
            // Helper to create Clarity values
            cv: {
                stringAscii(str) {
                    return { type: 'string-ascii', value: str };
                },
                uint(num) {
                    return { type: 'uint', value: num.toString() };
                },
                buffer(hexStr) {
                    return { type: 'buffer', value: hexStr.replace('0x', '') };
                }
            }
        };

        // BLOCKCHAIN CONFIGURATION
        const CONTRACT_ADDRESS = 'ST2Q2N5ZA8M6G7HKR0V45R7ZVX99A93T06W1PV0FW';
        const CONTRACT_NAME = 'bitcoin-oracle-core';
        const NETWORK = 'testnet';

        // Global state
        let walletConnected = false;
        let currentAccount = null;
        let isSubmitting = false;

        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            startPriceFeedUpdates();
        });

        function initializeApp() {
            console.log('Guardian Gateway DApp initialized with simplified wallet integration');
            setupEventListeners();
        }

        function setupEventListeners() {
            document.getElementById('walletConnect').addEventListener('click', connectWallet);
            document.getElementById('asset-select').addEventListener('change', updatePriceFromFeed);
        }

        // SIMPLIFIED WALLET CONNECTION
        async function connectWallet() {
            const button = document.getElementById('walletConnect');
            
            if (walletConnected) {
                walletConnected = false;
                currentAccount = null;
                button.textContent = 'Connect Wallet';
                button.classList.remove('connected');
                showMessage('Wallet disconnected', 'warning');
                return;
            }

            try {
                button.innerHTML = '<div class="loading"></div> Connecting...';
                
                const result = await StacksWallet.connect();
                
                walletConnected = true;
                currentAccount = result.address;
                
                button.textContent = `${currentAccount.slice(0, 6)}...${currentAccount.slice(-4)}`;
                button.classList.add('connected');
                
                document.getElementById('oracle-address').value = currentAccount;
                showMessage(`Connected to ${result.provider} wallet!`, 'success');
                
            } catch (error) {
                console.error('Wallet connection failed:', error);
                button.textContent = 'Connect Wallet';
                showMessage(error.message || 'Failed to connect wallet. Please install Leather or Xverse.', 'error');
            }
        }

        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.style.display = 'none');
            event.target.classList.add('active');
            document.getElementById(`${tabName}-tab`).style.display = 'block';
        }

        function updatePriceFromFeed() {
            const asset = document.getElementById('asset-select').value;
            const priceElement = document.getElementById(`${asset.toLowerCase()}-price`);
            const confidenceElement = document.getElementById(`${asset.toLowerCase()}-confidence`);
            
            if (priceElement && confidenceElement) {
                document.getElementById('price-input').value = priceElement.textContent.replace('$', '').replace(',', '');
                document.getElementById('confidence-input').value = confidenceElement.textContent.replace('%', '');
            }
        }

        // SIMPLIFIED ORACLE DATA SUBMISSION
        async function submitOracleData() {
            if (!walletConnected) {
                showMessage('Please connect your Stacks wallet first', 'error');
                return;
            }

            if (isSubmitting) return;

            const submitButton = document.getElementById('submit-data-btn');
            const originalText = submitButton.textContent;
            
            try {
                isSubmitting = true;
                submitButton.innerHTML = '<div class="loading"></div> Submitting...';
                submitButton.disabled = true;

                const assetId = document.getElementById('asset-select').value;
                const price = parseFloat(document.getElementById('price-input').value);
                const confidence = parseInt(document.getElementById('confidence-input').value);
                const blockHash = document.getElementById('block-hash-input').value;
                const vaaPayload = document.getElementById('vaa-input').value;

                if (!validateSubmissionForm({assetId, price, confidence, blockHash, vaaPayload})) {
                    return;
                }

                startValidationAnimation();
                await simulateValidationLayers();

                const priceInMicroUnits = Math.floor(price * 1000000);

                const functionArgs = [
                    StacksWallet.cv.stringAscii(assetId),
                    StacksWallet.cv.uint(priceInMicroUnits),
                    StacksWallet.cv.uint(confidence),
                    StacksWallet.cv.buffer(blockHash),
                    StacksWallet.cv.buffer(vaaPayload)
                ];

                const result = await StacksWallet.callContract(
                    CONTRACT_ADDRESS,
                    CONTRACT_NAME,
                    'submit-oracle-data',
                    functionArgs,
                    NETWORK
                );

                console.log('Transaction submitted:', result.txId);
                showMessage(`Oracle data submitted! Transaction: ${result.txId}`, 'success');
                addTransactionToHistory('Price Submission - ' + assetId, 'pending', result.txId);
                resetSubmissionForm();
                resetValidationLayers();

            } catch (error) {
                console.error('Submission failed:', error);
                showMessage('Failed to submit oracle data: ' + error.message, 'error');
                resetValidationLayers();
            } finally {
                isSubmitting = false;
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        }

        // SIMPLIFIED ORACLE REGISTRATION
        async function registerOracle() {
            if (!walletConnected) {
                showMessage('Please connect your Stacks wallet first', 'error');
                return;
            }

            const registerButton = document.getElementById('register-oracle-btn');
            const originalText = registerButton.textContent;
            
            try {
                registerButton.innerHTML = '<div class="loading"></div> Registering...';
                registerButton.disabled = true;

                const stxBond = parseFloat(document.getElementById('stx-bond').value);

                if (!stxBond || stxBond < 1000) {
                    showMessage('STX bond must be at least 1,000 STX', 'error');
                    return;
                }

                const stxBondInMicroStx = Math.floor(stxBond * 1000000);

                const functionArgs = [
                    StacksWallet.cv.uint(stxBondInMicroStx)
                ];

                const result = await StacksWallet.callContract(
                    CONTRACT_ADDRESS,
                    CONTRACT_NAME,
                    'register-oracle',
                    functionArgs,
                    NETWORK
                );

                console.log('Registration submitted:', result.txId);
                showMessage(`Oracle registration successful! Transaction: ${result.txId}`, 'success');
                addTransactionToHistory('Oracle Registration', 'pending', result.txId);

            } catch (error) {
                console.error('Registration failed:', error);
                showMessage('Failed to register oracle: ' + error.message, 'error');
            } finally {
                registerButton.textContent = originalText;
                registerButton.disabled = false;
            }
        }

        function validateSubmissionForm(data) {
            const validAssets = ['BTC', 'ETH', 'USDC', 'STAX'];
            if (!validAssets.includes(data.assetId)) {
                showMessage('Please select a valid asset', 'error');
                return false;
            }
            
            const priceBounds = {
                'BTC': { min: 1000, max: 500000 },
                'ETH': { min: 100, max: 50000 },
                'USDC': { min: 0.95, max: 1.05 },
                'STAX': { min: 0.01, max: 100 }
            };
            
            const bounds = priceBounds[data.assetId];
            if (data.price < bounds.min || data.price > bounds.max) {
                showMessage(`${data.assetId} price must be between $${bounds.min} and $${bounds.max}`, 'error');
                return false;
            }
            
            if (data.confidence < 90 || data.confidence > 100) {
                showMessage('Confidence must be between 90-100%', 'error');
                return false;
            }
            
            const cleanHash = data.blockHash.replace('0x', '');
            if (cleanHash.length !== 64 || !/^[0-9a-fA-F]{64}$/.test(cleanHash)) {
                showMessage('Bitcoin block hash must be 64 hexadecimal characters', 'error');
                return false;
            }
            
            if (!/^0x[0-9a-fA-F]+$/.test(data.vaaPayload) || data.vaaPayload.length < 10) {
                showMessage('VAA payload must be valid hexadecimal starting with 0x', 'error');
                return false;
            }
            
            return true;
        }

        function startValidationAnimation() {
            resetValidationLayers();
            showMessage('Starting 8-layer validation process...', 'warning');
        }

        async function simulateValidationLayers() {
            for (let i = 1; i <= 8; i++) {
                const layer = document.getElementById(`layer-${i}`);
                layer.classList.add('processing');
                await new Promise(resolve => setTimeout(resolve, 500));
                layer.classList.remove('processing');
                layer.classList.add('passed');
            }
        }

        function resetValidationLayers() {
            for (let i = 1; i <= 8; i++) {
                document.getElementById(`layer-${i}`).classList.remove('processing', 'passed');
            }
        }

        function addTransactionToHistory(type, status, txId = '') {
            const history = document.getElementById('transaction-history');
            const txLink = txId ? `<a href="https://explorer.hiro.so/txid/${txId}?chain=testnet" target="_blank" class="transaction-link">View on Explorer</a>` : '';
            const statusClass = status === 'confirmed' ? 'status-confirmed' : 'status-pending';
            const statusText = status === 'confirmed' ? 'Confirmed' : 'Pending';
            
            history.insertAdjacentHTML('afterbegin', `
                <div class="transaction-item">
                    <div class="transaction-details">
                        <div class="transaction-type">${type}</div>
                        <div class="transaction-time">Just now</div>
                        ${txLink}
                    </div>
                    <div class="transaction-status ${statusClass}">${statusText}</div>
                </div>
            `);
        }

        function resetSubmissionForm() {
            document.getElementById('price-input').value = '';
            document.getElementById('confidence-input').value = '';
            document.getElementById('block-hash-input').value = '';
            document.getElementById('vaa-input').value = '';
        }

        function showMessage(text, type) {
            const existingMessages = document.querySelectorAll('.message');
            existingMessages.forEach(msg => {
                if (!msg.classList.contains('warning') || type !== 'success') {
                    msg.remove();
                }
            });

            const message = document.createElement('div');
            message.className = `message ${type}`;
            message.textContent = text;

            const activeTab = document.querySelector('.tab-content[style*="block"], .tab-content:not([style])');
            if (activeTab) {
                activeTab.insertBefore(message, activeTab.firstChild);
            }

            if (type === 'success' || type === 'error') {
                setTimeout(() => message.remove(), 5000);
            }
        }

        function startPriceFeedUpdates() {
            updatePriceFeeds();
            updateNetworkStats();
            setInterval(updatePriceFeeds, 45000);
            setInterval(updateNetworkStats, 15000);
        }

        async function updatePriceFeeds() {
            const assets = ['btc', 'eth', 'usdc', 'stax'];
            
            for (const asset of assets) {
                try {
                    let price, confidence;
                    
                    if (asset === 'stax') {
                        price = await fetchSTXPrice();
                        confidence = 92 + Math.floor(Math.random() * 6);
                    } else {
                        const apiAsset = asset === 'usdc' ? 'usd-coin' : (asset === 'btc' ? 'bitcoin' : 'ethereum');
                        try {
                            const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${apiAsset}&vs_currencies=usd`);
                            const data = await response.json();
                            price = data[apiAsset]?.usd || getFallbackPrice(asset);
                            confidence = asset === 'usdc' ? 99 : (95 + Math.floor(Math.random() * 4));
                        } catch {
                            price = getFallbackPrice(asset);
                            confidence = getFallbackConfidence(asset);
                        }
                    }
                    
                    updateAssetDisplay(asset, price, confidence);
                } catch (error) {
                    updateAssetDisplay(asset, getFallbackPrice(asset), getFallbackConfidence(asset));
                }
            }
        }

        async function fetchSTXPrice() {
            try {
                const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=stacks&vs_currencies=usd');
                const data = await response.json();
                return data.stacks?.usd || 1.50;
            } catch {
                return 1.45 + (Math.random() * 0.10);
            }
        }

        function updateAssetDisplay(asset, price, confidence) {
            const priceElement = document.getElementById(`${asset}-price`);
            const confidenceElement = document.getElementById(`${asset}-confidence`);
            const confidenceBar = priceElement?.parentElement?.querySelector('.confidence-fill');
            
            if (priceElement) {
                if (asset === 'usdc') {
                    priceElement.textContent = '$1.00';
                } else if (asset === 'btc') {
                    priceElement.textContent = '$' + Math.round(price).toLocaleString() + '.00';
                } else {
                    priceElement.textContent = '$' + price.toFixed(2);
                }
            }
            
            if (confidenceElement) {
                confidenceElement.textContent = confidence + '%';
            }
            
            if (confidenceBar) {
                confidenceBar.style.width = confidence + '%';
            }
        }

        function getFallbackPrice(asset) {
            return { 'btc': 67000, 'eth': 3400, 'usdc': 1.00, 'stax': 1.45 }[asset];
        }

        function getFallbackConfidence(asset) {
            return { 'btc': 95, 'eth': 93, 'usdc': 99, 'stax': 90 }[asset];
        }

        function updateNetworkStats() {
            const activeOracles = document.getElementById('active-oracles');
            if (activeOracles) {
                const current = parseInt(activeOracles.textContent);
                const change = Math.random() > 0.85 ? (Math.random() > 0.5 ? 1 : -1) : 0;
                activeOracles.textContent = Math.max(3, Math.min(12, current + change));
            }
            
            const consensusRounds = document.getElementById('consensus-rounds');
            if (consensusRounds) {
                consensusRounds.textContent = parseInt(consensusRounds.textContent) + 1;
            }
        }
    </script>
</body>
</html>