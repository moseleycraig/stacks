;; Bitcoin Oracle Core Contract - Proof of Concept with DeFi Protocol Integration
;; Single-contract PoC implementing 8-layer security validation with ALEX, Velar, Hermetica APIs

;; ===== CONSTANTS =====

(define-constant CONTRACT_OWNER tx-sender)
(define-constant ERR_UNAUTHORIZED (err u100))
(define-constant ERR_INVALID_SIGNATURE (err u101))
(define-constant ERR_INVALID_BITCOIN_BLOCK (err u102))
(define-constant ERR_INSUFFICIENT_ORACLES (err u103))
(define-constant ERR_LOW_CONFIDENCE (err u104))
(define-constant ERR_STALE_DATA (err u105))
(define-constant ERR_PRICE_DEVIATION (err u106))
(define-constant ERR_INSUFFICIENT_CONFIRMATIONS (err u107))
(define-constant ERR_ORACLE_NOT_REGISTERED (err u108))
(define-constant ERR_INVALID_VAA (err u109))
(define-constant ERR_PYTH_VERIFICATION_FAILED (err u110))

;; ADD THESE TWO LINES (undefined errors):
(define-constant ERR_INVALID_ASSET (err u111))
(define-constant ERR_INVALID_RANGE (err u112))

;; Security parameters - Bootstrap Mode
(define-constant MIN_ORACLES u1) ;; Bootstrap with single oracle
(define-constant MIN_ORACLES_PRODUCTION u3) ;; Future production requirement
(define-constant MIN_STX_BOND u10000000000) ;; 10,000 STX (production)
(define-constant MIN_BTC_BOND u10000000) ;; 0.1 BTC (production)
(define-constant MIN_CONFIDENCE_SCORE u95) ;; 95%
(define-constant MAX_DATA_AGE_BLOCKS u30) ;; ~5 minutes
(define-constant MAX_PRICE_DEVIATION u500) ;; 5% (in basis points)
(define-constant REQUIRED_BTC_CONFIRMATIONS u6)
(define-constant PRECISION_FACTOR u100000000) ;; 8 decimal places
(define-constant BOOTSTRAP_MODE true) ;; Enable single oracle operation

;; ===== DATA STRUCTURES =====

;; Oracle submission data structure
(define-map oracle-submissions
  { oracle: principal, asset-id: (string-ascii 10), submission-id: uint }
  {
    price: uint,
    confidence: uint,
    bitcoin-block-hash: (buff 32),
    bitcoin-stacks-block-height: uint,
    vaa-payload: (buff 1024),
    timestamp: uint,
    signature: (buff 65),
    is-validated: bool
  }
)

;; Current price feeds with enhanced metadata for DeFi integration
(define-map price-feeds
  (string-ascii 10) ;; asset-id (BTC, ETH, USDC, STAX)
  {
    price: uint,
    confidence: uint,
    last-update-height: uint,
    last-update-timestamp: uint,
    bitcoin-anchor-block: (buff 32),
    validation-score: uint,
    is-finalized: bool,
    oracle-count: uint,
    deviation-score: uint,
    data-freshness: uint
  }
)

;; Oracle operator registry with optional bonds
(define-map oracle-operators
  principal
  {
    is-active: bool,
    reputation-score: uint,
    total-submissions: uint,
    successful-submissions: uint,
    last-submission-height: uint,
    stx-bond: uint,
    btc-bond: uint,
    is-bootstrap-oracle: bool
  }
)

;; Bitcoin block confirmation tracking (simplified for PoC)
(define-map bitcoin-confirmations
  (buff 32) ;; bitcoin-block-hash
  {
    height: uint,
    confirmations: uint,
    is-confirmed: bool,
    first-seen-height: uint
  }
)

;; Submission rounds for consensus
(define-map submission-rounds
  { asset-id: (string-ascii 10), round-id: uint }
  {
    submissions-count: uint,
    start-height: uint,
    is-complete: bool,
    consensus-price: uint,
    consensus-confidence: uint
  }
)

;; DeFi Protocol Integration Storage
(define-map defi-protocol-stats
  (string-ascii 10) ;; protocol name
  {
    total-requests: uint,
    last-request-height: uint,
    integration-health: uint,
    is-active: bool
  }
)

;; ===== DATA VARIABLES =====

(define-data-var contract-paused bool false)
(define-data-var current-round-id uint u0)
(define-data-var total-oracles uint u0)
(define-data-var pyth-oracle-contract principal 'SP000000000000000000002Q6VF78.pyth-oracle-v3)
(define-data-var bootstrap-mode bool true) ;; Start in bootstrap mode
(define-data-var min-oracles-required uint u1) ;; Dynamic minimum, starts at 1

;; PoC demo variables
(define-data-var demo-mode bool true)
(define-data-var total-defi-integrations uint u0)

;; ===== PRIVATE FUNCTIONS =====

;; Validate oracle bonds based on current mode
(define-private (validate-oracle-bonds (oracle principal))
  (let (
    (oracle-data (unwrap! (map-get? oracle-operators oracle) false))
    (is-bootstrap (var-get bootstrap-mode))
  )
    (if is-bootstrap
      ;; Bootstrap mode: bonds can be zero, but oracle must be marked as bootstrap
      (get is-bootstrap-oracle oracle-data)
      ;; Production mode: require minimum bonds
      (and
        (>= (get stx-bond oracle-data) MIN_STX_BOND)
        (>= (get btc-bond oracle-data) MIN_BTC_BOND)
        (not (get is-bootstrap-oracle oracle-data)) ;; Production oracles shouldn't be bootstrap
      )
    )
  )
)

;; Layer 1: VAA Signature Verification
(define-private (verify-vaa-signature (vaa-payload (buff 1024)) (oracle principal))
  (let (
    (oracle-data (unwrap! (map-get? oracle-operators oracle) false))
  )
    ;; Basic VAA structure validation
    (and
      (get is-active oracle-data)
      (> (len vaa-payload) u0)
      (validate-oracle-bonds oracle) ;; Check bond requirements
      ;; Additional VAA signature verification would go here
      ;; This would typically involve verifying Wormhole guardian signatures
      true
    )
  )
)

;; Validate asset ID format
(define-private (is-valid-asset-id (asset-id (string-ascii 10)))
  (or
    (is-eq asset-id "BTC")
    (is-eq asset-id "ETH")
    (is-eq asset-id "USDC")
    (is-eq asset-id "STAX")
  )
)

;; Layer 2: Pyth Oracle V3 Integration
(define-private (verify-pyth-integration (vaa-payload (buff 1024)) (asset-id (string-ascii 10)))
  ;; Simplified for PoC - would integrate with actual Pyth contract
  (and
    (> (len vaa-payload) u0)
    (is-valid-asset-id asset-id)
  )
)

;; Layer 3: Multi-Oracle Consensus Check (Bootstrap Mode Compatible)
(define-private (check-oracle-consensus (asset-id (string-ascii 10)) (round-id uint))
  (let (
    (round-data (unwrap! (map-get? submission-rounds { asset-id: asset-id, round-id: round-id }) false))
    (required-oracles (var-get min-oracles-required))
  )
    (>= (get submissions-count round-data) required-oracles)
  )
)

;; Layer 4: Bitcoin Block Validation (simplified for PoC)
(define-private (validate-bitcoin-block (block-hash (buff 32)) (stacks-block-height uint))
  (and
    (> (len block-hash) u0)
    (> stacks-block-height u0)
    ;; Additional validation would go here
    true
  )
)

;; Layer 5: Confidence Score Analysis
(define-private (validate-confidence-score (confidence uint) (cross-source-variance uint))
  (and
    (>= confidence MIN_CONFIDENCE_SCORE)
    (<= cross-source-variance u1000) ;; Max 10% variance between sources
  )
)

;; Layer 6: Time-Window Validation
(define-private (validate-time-window (timestamp uint) (current-height uint))
  (let (
    (block-time-estimate (* (- current-height u1) u600)) ;; ~10 min blocks
  )
    (and
      ;; Not too old
      (<= (- block-time-estimate timestamp) u300) ;; 5 minutes
      ;; Not in the future
      (>= block-time-estimate timestamp)
    )
  )
)

;; Layer 7: Price Deviation Limits
(define-private (validate-price-deviation (new-price uint) (asset-id (string-ascii 10)))
  (match (map-get? price-feeds asset-id)
    existing-feed 
      (let (
        (old-price (get price existing-feed))
        (price-change (if (> new-price old-price) 
                       (- new-price old-price) 
                       (- old-price new-price)))
        (max-change (/ (* old-price MAX_PRICE_DEVIATION) u10000))
      )
        (<= price-change max-change)
      )
    ;; No existing price, allow any price
    true
  )
)

;; Layer 8: Bitcoin Confirmation Check (simplified for PoC)
(define-private (check-bitcoin-confirmations (block-hash (buff 32)))
  (match (map-get? bitcoin-confirmations block-hash)
    conf-data (get is-confirmed conf-data)
    true ;; Allow for PoC - would be false in production
  )
)

;; Get price from single oracle submission (bootstrap mode)
(define-private (get-single-oracle-price (asset-id (string-ascii 10)) (round-id uint))
  ;; Simplified: return mock price based on asset
  (if (is-eq asset-id "BTC") u5000000000000 ;; $50,000
    (if (is-eq asset-id "ETH") u300000000000 ;; $3,000
      (if (is-eq asset-id "USDC") u100000000 ;; $1.00
        u150000000 ;; STAX $1.50
      )
    )
  )
)

;; Get weighted median from multiple oracles (production mode)
(define-private (get-weighted-median-price (asset-id (string-ascii 10)) (round-id uint))
  ;; Placeholder for production median calculation
  (get-single-oracle-price asset-id round-id)
)

;; Calculate consensus price (Bootstrap Mode: single oracle or median)
(define-private (calculate-consensus-price (asset-id (string-ascii 10)) (round-id uint))
  (let (
    (round-data (unwrap! (map-get? submission-rounds { asset-id: asset-id, round-id: round-id }) u0))
    (is-bootstrap (var-get bootstrap-mode))
  )
    (if is-bootstrap
      ;; Bootstrap mode: use single oracle submission (simplified)
      (get-single-oracle-price asset-id round-id)
      ;; Production mode: calculate weighted median
      (get-weighted-median-price asset-id round-id)
    )
  )
)

;; Update oracle reputation based on accuracy
(define-private (update-oracle-reputation (oracle principal) (is-accurate bool))
  (let (
    (oracle-data (unwrap! (map-get? oracle-operators oracle) false))
    (new-total (+ (get total-submissions oracle-data) u1))
    (new-successful (if is-accurate 
                     (+ (get successful-submissions oracle-data) u1)
                     (get successful-submissions oracle-data)))
    (new-reputation (/ (* new-successful u100) new-total))
  )
    (map-set oracle-operators oracle
      (merge oracle-data {
        total-submissions: new-total,
        successful-submissions: new-successful,
        reputation-score: new-reputation,
        last-submission-height: stacks-block-height
      })
    )
    true
  )
)

;; Update DeFi protocol statistics
(define-private (update-defi-stats (protocol (string-ascii 10)))
  (let (
    (current-stats (default-to 
      { total-requests: u0, last-request-height: u0, integration-health: u100, is-active: true }
      (map-get? defi-protocol-stats protocol)))
  )
    (map-set defi-protocol-stats protocol
      (merge current-stats {
        total-requests: (+ (get total-requests current-stats) u1),
        last-request-height: stacks-block-height
      })
    )
  )
)

;; ===== DEFI PROTOCOL INTEGRATION APIS =====

;; ALEX Lab Integration - AMM DEX price consumption
(define-public (alex-get-price-for-amm (asset-id (string-ascii 10)))
  (let (
    (price-data (unwrap! (map-get? price-feeds asset-id) (err "Price not available")))
    (alex-fees u300) ;; 0.3% fee in basis points
    (slippage-protection (get validation-score price-data))
  )
    ;; Update DeFi protocol statistics
    (update-defi-stats "alex")
    
    (ok {
      protocol: "ALEX",
      asset-id: asset-id,
      oracle-price: (get price price-data),
      confidence: (get confidence price-data),
      bitcoin-anchored: true,
      validation-score: (get validation-score price-data),
      amm-ready: (>= (get confidence price-data) u90),
      slippage-protection: slippage-protection,
      trading-fee: alex-fees,
      last-update: (get last-update-timestamp price-data),
      security-level: "bitcoin-grade"
    })
  )
)

;; ALEX Lab liquidity pool impact calculation
(define-public (alex-calculate-pool-impact 
  (asset-id (string-ascii 10)) 
  (trade-amount uint))
  
  (let (
    (price-data (unwrap! (map-get? price-feeds asset-id) (err "Price not available")))
    (base-price (get price price-data))
    (confidence (get confidence price-data))
    ;; Simplified pool calculations for demo
    (pool-liquidity (* base-price u1000000)) ;; Mock 1M units liquidity
    (price-impact (/ (* trade-amount u10000) pool-liquidity))
  )
    (update-defi-stats "alex")
    
    (ok {
      protocol: "ALEX",
      asset-id: asset-id,
      trade-amount: trade-amount,
      base-price: base-price,
      estimated-price-impact: price-impact,
      pool-liquidity: pool-liquidity,
      confidence: confidence,
      bitcoin-security: (>= (get validation-score price-data) u85),
      recommended-max-trade: (/ pool-liquidity u100) ;; 1% of liquidity
    })
  )
)

;; Velar Integration - Multi-feature DeFi price consumption
(define-public (velar-get-liquidity-data (asset-id (string-ascii 10)))
  (let (
    (price-data (unwrap! (map-get? price-feeds asset-id) (err "Price not available")))
    (velar-multiplier u150) ;; 1.5x leverage factor
    (bitcoin-finality (get is-finalized price-data))
  )
    (update-defi-stats "velar")
    
    (ok {
      protocol: "Velar",
      asset-id: asset-id,
      spot-price: (get price price-data),
      confidence: (get confidence price-data),
      bitcoin-finality: bitcoin-finality,
      leverage-available: (if bitcoin-finality velar-multiplier u100),
      liquidity-tier: (if (>= (get confidence price-data) u95) "premium" "standard"),
      dharma-amm-ready: (and bitcoin-finality (>= (get confidence price-data) u90)),
      risk-score: (- u100 (get confidence price-data)),
      last-anchor-block: (get bitcoin-anchor-block price-data),
      security-guarantee: "bitcoin-backed"
    })
  )
)

;; Velar farming pool reward calculation
(define-public (velar-calculate-farming-rewards 
  (asset-id (string-ascii 10)) 
  (staked-amount uint)
  (farming-period uint))
  
  (let (
    (price-data (unwrap! (map-get? price-feeds asset-id) (err "Price not available")))
    (base-apy u1200) ;; 12% base APY
    (security-bonus (if (>= (get validation-score price-data) u95) u300 u0)) ;; 3% bonus for high security
    (total-apy (+ base-apy security-bonus))
    (rewards (/ (* staked-amount total-apy farming-period) (* u365 u10000)))
  )
    (update-defi-stats "velar")
    
    (ok {
      protocol: "Velar",
      asset-id: asset-id,
      staked-amount: staked-amount,
      farming-period: farming-period,
      base-apy: base-apy,
      bitcoin-security-bonus: security-bonus,
      total-apy: total-apy,
      estimated-rewards: rewards,
      price-stability: (get confidence price-data),
      risk-level: "low" ;; Due to Bitcoin anchoring
    })
  )
)

;; Hermetica Integration - Synthetic dollar and derivatives
(define-public (hermetica-get-usdh-rate (asset-id (string-ascii 10)))
  (let (
    (price-data (unwrap! (map-get? price-feeds asset-id) (err "Price not available")))
    (stability-factor (get confidence price-data))
    (bitcoin-backing (get validation-score price-data))
    ;; USDh rate calculation based on Bitcoin-anchored price
    (usdh-rate (if (is-eq asset-id "BTC") 
                 (/ u100000000 (get price price-data)) ;; BTC to USD rate
                 (get price price-data))) ;; Direct USD rate for other assets
  )
    (update-defi-stats "hermetica")
    
    (ok {
      protocol: "Hermetica",
      asset-id: asset-id,
      usdh-rate: usdh-rate,
      stability-score: stability-factor,
      bitcoin-backing: bitcoin-backing,
      synthetic-ready: (>= stability-factor u92),
      collateral-ratio: (+ u150 (/ bitcoin-backing u10)), ;; 150% + security bonus
      liquidation-threshold: u125, ;; 125% with Bitcoin security
      interest-rate: (- u800 (/ bitcoin-backing u25)), ;; Lower rates for secure oracles
      price-feed-source: "bitcoin-anchored-oracle",
      risk-category: "low-risk"
    })
  )
)

;; Hermetica derivative vault calculations
(define-public (hermetica-calculate-vault-health 
  (asset-id (string-ascii 10))
  (collateral-amount uint)
  (debt-amount uint))
  
  (let (
    (price-data (unwrap! (map-get? price-feeds asset-id) (err "Price not available")))
    (current-price (get price price-data))
    (confidence (get confidence price-data))
    (collateral-value (* collateral-amount current-price))
    (collateral-ratio (if (> debt-amount u0) (/ (* collateral-value u100) debt-amount) u0))
    (health-factor (/ collateral-ratio u125)) ;; Compared to 125% threshold
    (is-healthy (>= collateral-ratio u125))
  )
    (update-defi-stats "hermetica")
    
    (ok {
      protocol: "Hermetica",
      asset-id: asset-id,
      collateral-amount: collateral-amount,
      debt-amount: debt-amount,
      current-price: current-price,
      collateral-value: collateral-value,
      collateral-ratio: collateral-ratio,
      health-factor: health-factor,
      is-healthy: is-healthy,
      confidence: confidence,
      bitcoin-security: (>= (get validation-score price-data) u85),
      liquidation-risk: (if (< collateral-ratio u130) "high" 
                         (if (< collateral-ratio u150) "medium" "low")),
      recommended-action: (if is-healthy "safe" "add-collateral")
    })
  )
)

;; ===== PUBLIC FUNCTIONS =====

;; Finalize price update after consensus and Bitcoin confirmations
(define-public (finalize-price-update (asset-id (string-ascii 10)) (round-id uint))
  (begin
    ;; Validate inputs first
    (asserts! (is-valid-asset-id asset-id) ERR_INVALID_ASSET)
    (asserts! (> round-id u0) ERR_INVALID_RANGE)

    (let (
      (round-data (match (map-get? submission-rounds { asset-id: asset-id, round-id: round-id })
                  round-info round-info
                  { submissions-count: u0, start-height: u0, is-complete: false, consensus-price: u0, consensus-confidence: u0 }))
      (consensus-price (calculate-consensus-price asset-id round-id))
      (required-oracles (var-get min-oracles-required))
    )
    
    ;; Layer 3: Multi-Oracle Consensus Check (dynamic based on mode)
    (asserts! (>= (get submissions-count round-data) required-oracles) ERR_INSUFFICIENT_ORACLES)
    
    ;; Layer 8: Bitcoin Confirmation Check (simplified for PoC)
    ;; In production, would check actual Bitcoin confirmations
    
    ;; Update price feed
    (map-set price-feeds asset-id
      {
        price: consensus-price,
        confidence: (if (var-get bootstrap-mode) u90 u95),
        last-update-height: stacks-block-height,
        last-update-timestamp: (match (get-stacks-block-info? time stacks-block-height)
                        timestamp timestamp
                        u0),
        bitcoin-anchor-block: 0x00,
        validation-score: (if (var-get bootstrap-mode) u85 u100),
        is-finalized: true,
        oracle-count: (get submissions-count round-data),
        deviation-score: u5,
        data-freshness: u0
      }
    )
    ;; Mark round as complete
    (map-set submission-rounds
      { asset-id: asset-id, round-id: round-id }
      (merge round-data { is-complete: true, consensus-price: consensus-price })
    )
    
    ;; Increment round
    (var-set current-round-id (+ round-id u1))
    
    ;; ADD THIS: Return a response type
    (ok consensus-price)
    )
  )
)

;; Main oracle data submission function with 8-layer validation
(define-public (submit-oracle-data 
  (asset-id (string-ascii 10))
  (price uint)
  (confidence uint)
  (bitcoin-block-hash (buff 32))
  (bitcoin-stacks-block-height uint)
  (vaa-payload (buff 1024))
  (signature (buff 65)))

  ;; solution to remove the begin block entirely
  ;; assert statements below are intermediate expressions

    ;; (begin
    ;; ;; Validate all inputs first as trusted parameters
    ;;   (asserts! (is-valid-asset-id asset-id) ERR_INVALID_ASSET)
    ;;   (asserts! (> price u0) ERR_INVALID_RANGE)
    ;;   (asserts! (and (>= confidence u0) (<= confidence u100)) ERR_INVALID_RANGE)
    ;;   (asserts! (> (len bitcoin-block-hash) u0) ERR_INVALID_BITCOIN_BLOCK)
    ;;   (asserts! (> bitcoin-stacks-block-height u0) ERR_INVALID_RANGE)
    ;;   (asserts! (> (len vaa-payload) u0) ERR_INVALID_VAA)
    ;;   (asserts! (is-eq (len signature) u65) ERR_INVALID_SIGNATURE)
  
      (let (
        ;; Argument 1: Bindings
        (oracle tx-sender)
        (current-height stacks-block-height)
        (round-id (var-get current-round-id))
        (submission-id (+ (* round-id u1000) (default-to u0 (get submissions-count (map-get? submission-rounds { asset-id: asset-id, round-id: round-id })))))
      )

        ;; Argument 2: Oracle logic

        (asserts! (is-valid-asset-id asset-id) ERR_INVALID_ASSET)
        (asserts! (> price u0) ERR_INVALID_RANGE)
        (asserts! (and (>= confidence u0) (<= confidence u100)) ERR_INVALID_RANGE)
        (asserts! (> (len bitcoin-block-hash) u0) ERR_INVALID_BITCOIN_BLOCK)
        (asserts! (> bitcoin-stacks-block-height u0) ERR_INVALID_RANGE)
        (asserts! (> (len vaa-payload) u0) ERR_INVALID_VAA)
        (asserts! (is-eq (len signature) u65) ERR_INVALID_SIGNATURE)

        ;; Check if contract is paused
        (asserts! (not (var-get contract-paused)) ERR_UNAUTHORIZED)
      
        ;; Check if oracle is registered
        (asserts! (is-some (map-get? oracle-operators oracle)) ERR_ORACLE_NOT_REGISTERED)
      
        ;; Layer 1: VAA Signature Verification
        (asserts! (verify-vaa-signature vaa-payload oracle) ERR_INVALID_VAA)
      
        ;; Layer 2: Pyth Oracle V3 Integration
        (asserts! (verify-pyth-integration vaa-payload asset-id) ERR_PYTH_VERIFICATION_FAILED)

        ;; Layer 4: Bitcoin Block Validation (before consensus)
        (asserts! (validate-bitcoin-block bitcoin-block-hash bitcoin-stacks-block-height) ERR_INVALID_BITCOIN_BLOCK)
      
        ;; Layer 5: Confidence Score Analysis
        (asserts! (validate-confidence-score confidence u0) ERR_LOW_CONFIDENCE)

        ;; #REPL 
        ;; replace unwrap! with the match expression
        ;; #TRNSL the match statement says:
        ;; 1. if get-stacks-block-info returns some-timestamp, use that timestamp value
        ;; 2. if it returns none, use u0 as the default
        
        ;; Layer 6: Time-Window Validation
        (asserts! (validate-time-window 
              (match (get-stacks-block-info? time current-height)
                timestamp timestamp
                u0) 
              current-height) 
            ERR_STALE_DATA)
        
        ;; Layer 7: Price Deviation Limits
        (asserts! (validate-price-deviation price asset-id) ERR_PRICE_DEVIATION)
        
        ;; Store submission
        (map-set oracle-submissions
          { oracle: oracle, asset-id: asset-id, submission-id: submission-id }
          {
            price: price,
            confidence: confidence,
            bitcoin-block-hash: bitcoin-block-hash,
            bitcoin-stacks-block-height: bitcoin-stacks-block-height,
            vaa-payload: vaa-payload,
            timestamp: (match (get-stacks-block-info? time current-height) timestamp timestamp u0),
            signature: signature,
            is-validated: false
          }
        )
        
        ;; Update submission round
        (map-set submission-rounds
          { asset-id: asset-id, round-id: round-id }
          {
            submissions-count: (+ (default-to u0 (get submissions-count (map-get? submission-rounds { asset-id: asset-id, round-id: round-id }))) u1),
            start-height: current-height,
            is-complete: false,
            consensus-price: u0,
            consensus-confidence: u0
          }
        ) 
    
        ;; LAST - Layer 3: Check if we have enough oracles for consensus - 
        (if (check-oracle-consensus asset-id round-id)
          (finalize-price-update asset-id round-id)  ;; Returns (response uint uint)
          (ok u0)                                    ;; Returns (response uint uint) - same type
        )
      )    
    )
    
;; Register bootstrap oracle with zero bonds (bootstrap mode only)
(define-public (register-bootstrap-oracle (oracle principal))
  (begin
    ;; Input validation
    (asserts! (is-standard oracle) ERR_INVALID_RANGE)
    (asserts! (is-eq tx-sender CONTRACT_OWNER) ERR_UNAUTHORIZED)
    (asserts! (var-get bootstrap-mode) ERR_UNAUTHORIZED)
    
    (map-set oracle-operators oracle
      {
        is-active: true,
        reputation-score: u100,
        total-submissions: u0,
        successful-submissions: u0,
        last-submission-height: u0,
        stx-bond: u0, ;; No bond required in bootstrap
        btc-bond: u0, ;; No bond required in bootstrap
        is-bootstrap-oracle: true
      }
    )
    (var-set total-oracles (+ (var-get total-oracles) u1))
    (ok true)
  )
)

;; Emergency pause function
(define-public (pause-contract)
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) ERR_UNAUTHORIZED)
    (var-set contract-paused true)
    (ok true)
  )
)

;; Resume contract
(define-public (resume-contract)
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) ERR_UNAUTHORIZED)
    (var-set contract-paused false)
    (ok true)
  )
)

;; ===== PoC DEMO FUNCTIONS =====

;; Initialize PoC with mock data
(define-public (initialize-poc-demo)
  (begin
    (asserts! (is-eq tx-sender CONTRACT_OWNER) ERR_UNAUTHORIZED)
    
    ;; Register demo oracle
    (try! (register-bootstrap-oracle tx-sender))
    
    ;; Create initial price feeds with mock data
    (map-set price-feeds "BTC"
      { price: u5000000000000, confidence: u95, last-update-height: stacks-block-height,
        last-update-timestamp: u1640995200, bitcoin-anchor-block: 0x00, validation-score: u95,
        is-finalized: true, oracle-count: u1, deviation-score: u2, data-freshness: u0 })
    
    (map-set price-feeds "ETH"
      { price: u300000000000, confidence: u93, last-update-height: stacks-block-height,
        last-update-timestamp: u1640995200, bitcoin-anchor-block: 0x00, validation-score: u93,
        is-finalized: true, oracle-count: u1, deviation-score: u3, data-freshness: u0 })
    
    (map-set price-feeds "USDC"
      { price: u100000000, confidence: u99, last-update-height: stacks-block-height,
        last-update-timestamp: u1640995200, bitcoin-anchor-block: 0x00, validation-score: u99,
        is-finalized: true, oracle-count: u1, deviation-score: u1, data-freshness: u0 })
    
    (map-set price-feeds "STAX"
      { price: u150000000, confidence: u90, last-update-height: stacks-block-height,
        last-update-timestamp: u1640995200, bitcoin-anchor-block: 0x00, validation-score: u90,
        is-finalized: true, oracle-count: u1, deviation-score: u5, data-freshness: u0 })
    
    (var-set demo-mode true)
    (ok true)
  )
)

;; ===== READ-ONLY FUNCTIONS =====

;; Get current price for an asset
(define-read-only (get-price (asset-id (string-ascii 10)))
  (map-get? price-feeds asset-id)
)

;; Get comprehensive DeFi integration status
(define-read-only (get-defi-integration-status (asset-id (string-ascii 10)))
  (match (map-get? price-feeds asset-id)
    price-data
      (ok {
        asset-id: asset-id,
        price: (get price price-data),
        confidence: (get confidence price-data),
        bitcoin-anchored: (get is-finalized price-data),
        validation-score: (get validation-score price-data),
        
        ;; Integration readiness scores
        alex-ready: (>= (get confidence price-data) u90),
        velar-ready: (and (get is-finalized price-data) (>= (get confidence price-data) u90)),
        hermetica-ready: (>= (get confidence price-data) u92),
        
        ;; Security benefits for each protocol
        alex-benefits: "secure-amm-trading",
        velar-benefits: "bitcoin-finality-leverage", 
        hermetica-benefits: "stable-synthetic-backing",
        
        last-update: (get last-update-timestamp price-data),
        next-update-estimate: (+ (get last-update-timestamp price-data) u300) ;; 5 minutes
      })
    (err "Asset not found")
  )
)

;; Get all DeFi protocols integration summary (simplified read-only version)
(define-read-only (get-all-defi-integrations)
  (let (
    (btc-price-data (map-get? price-feeds "BTC"))
    (eth-price-data (map-get? price-feeds "ETH"))
    (usdc-price-data (map-get? price-feeds "USDC"))
    (stax-price-data (map-get? price-feeds "STAX"))
  )
    {
      btc-integrations: {
        alex: (match btc-price-data
          price-data {
            protocol: "ALEX",
            asset-id: "BTC",
            oracle-price: (get price price-data),
            confidence: (get confidence price-data),
            amm-ready: (>= (get confidence price-data) u90),
            security-level: "bitcoin-grade"
          }
          { protocol: "ALEX", asset-id: "BTC", oracle-price: u0, confidence: u0, amm-ready: false, security-level: "unavailable" }
        ),
        velar: (match btc-price-data
          price-data {
            protocol: "Velar",
            asset-id: "BTC",
            spot-price: (get price price-data),
            confidence: (get confidence price-data),
            leverage-available: (if (get is-finalized price-data) u150 u100),
            security-guarantee: "bitcoin-backed"
          }
          { protocol: "Velar", asset-id: "BTC", spot-price: u0, confidence: u0, leverage-available: u100, security-guarantee: "unavailable" }
        ),
        hermetica: (match btc-price-data
          price-data {
            protocol: "Hermetica",
            asset-id: "BTC",
            usdh-rate: (/ u100000000 (get price price-data)),
            stability-score: (get confidence price-data),
            synthetic-ready: (>= (get confidence price-data) u92)
          }
          { protocol: "Hermetica", asset-id: "BTC", usdh-rate: u0, stability-score: u0, synthetic-ready: false }
        )
      },
      
      eth-integrations: {
        alex: (match eth-price-data
          price-data {
            protocol: "ALEX",
            asset-id: "ETH", 
            oracle-price: (get price price-data),
            confidence: (get confidence price-data),
            amm-ready: (>= (get confidence price-data) u90),
            security-level: "bitcoin-grade"
          }
          { protocol: "ALEX", asset-id: "ETH", oracle-price: u0, confidence: u0, amm-ready: false, security-level: "unavailable" }
        ),
        velar: (match eth-price-data
          price-data {
            protocol: "Velar",
            asset-id: "ETH",
            spot-price: (get price price-data),
            confidence: (get confidence price-data),
            leverage-available: (if (get is-finalized price-data) u150 u100),
            security-guarantee: "bitcoin-backed"
          }
          { protocol: "Velar", asset-id: "ETH", spot-price: u0, confidence: u0, leverage-available: u100, security-guarantee: "unavailable" }
        ),
        hermetica: (match eth-price-data
          price-data {
            protocol: "Hermetica",
            asset-id: "ETH",
            usdh-rate: (get price price-data),
            stability-score: (get confidence price-data),
            synthetic-ready: (>= (get confidence price-data) u92)
          }
          { protocol: "Hermetica", asset-id: "ETH", usdh-rate: u0, stability-score: u0, synthetic-ready: false }
        )
      },
      
      usdc-integrations: {
        alex: (match usdc-price-data
          price-data {
            protocol: "ALEX",
            asset-id: "USDC",
            oracle-price: (get price price-data),
            confidence: (get confidence price-data),
            amm-ready: (>= (get confidence price-data) u90),
            security-level: "bitcoin-grade"
          }
          { protocol: "ALEX", asset-id: "USDC", oracle-price: u0, confidence: u0, amm-ready: false, security-level: "unavailable" }
        ),
        velar: (match usdc-price-data
          price-data {
            protocol: "Velar",
            asset-id: "USDC",
            spot-price: (get price price-data),
            confidence: (get confidence price-data),
            leverage-available: (if (get is-finalized price-data) u150 u100),
            security-guarantee: "bitcoin-backed"
          }
          { protocol: "Velar", asset-id: "USDC", spot-price: u0, confidence: u0, leverage-available: u100, security-guarantee: "unavailable" }
        ),
        hermetica: (match usdc-price-data
          price-data {
            protocol: "Hermetica",
            asset-id: "USDC",
            usdh-rate: (get price price-data),
            stability-score: (get confidence price-data),
            synthetic-ready: (>= (get confidence price-data) u92)
          }
          { protocol: "Hermetica", asset-id: "USDC", usdh-rate: u0, stability-score: u0, synthetic-ready: false }
        )
      },
      
      stax-integrations: {
        alex: (match stax-price-data
          price-data {
            protocol: "ALEX",
            asset-id: "STAX",
            oracle-price: (get price price-data),
            confidence: (get confidence price-data),
            amm-ready: (>= (get confidence price-data) u90),
            security-level: "bitcoin-grade"
          }
          { protocol: "ALEX", asset-id: "STAX", oracle-price: u0, confidence: u0, amm-ready: false, security-level: "unavailable" }
        ),
        velar: (match stax-price-data
          price-data {
            protocol: "Velar",
            asset-id: "STAX",
            spot-price: (get price price-data),
            confidence: (get confidence price-data),
            leverage-available: (if (get is-finalized price-data) u150 u100),
            security-guarantee: "bitcoin-backed"
          }
          { protocol: "Velar", asset-id: "STAX", spot-price: u0, confidence: u0, leverage-available: u100, security-guarantee: "unavailable" }
        ),
        hermetica: (match stax-price-data
          price-data {
            protocol: "Hermetica",
            asset-id: "STAX",
            usdh-rate: (get price price-data),
            stability-score: (get confidence price-data),
            synthetic-ready: (>= (get confidence price-data) u92)
          }
          { protocol: "Hermetica", asset-id: "STAX", usdh-rate: u0, stability-score: u0, synthetic-ready: false }
        )
      },
      
      ;; Overall system health for DeFi
      system-status: {
        total-assets: u4,
        bitcoin-anchored: true,
        average-confidence: u93,
        defi-protocols-supported: u3,
        integration-health: "excellent"
      }
    }
  )
)

;; Read-only versions of DeFi integration functions (no state changes)
(define-read-only (get-alex-price-data (asset-id (string-ascii 10)))
  (match (map-get? price-feeds asset-id)
    price-data
      {
        protocol: "ALEX",
        asset-id: asset-id,
        oracle-price: (get price price-data),
        confidence: (get confidence price-data),
        bitcoin-anchored: true,
        validation-score: (get validation-score price-data),
        amm-ready: (>= (get confidence price-data) u90),
        slippage-protection: (get validation-score price-data),
        trading-fee: u300,
        last-update: (get last-update-timestamp price-data),
        security-level: "bitcoin-grade"
      }
    {
      protocol: "ALEX",
      asset-id: asset-id,
      oracle-price: u0,
      confidence: u0,
      bitcoin-anchored: false,
      validation-score: u0,
      amm-ready: false,
      slippage-protection: u0,
      trading-fee: u300,
      last-update: u0,
      security-level: "unavailable"
    }
  )
)

(define-read-only (get-velar-liquidity-data (asset-id (string-ascii 10)))
  (match (map-get? price-feeds asset-id)
    price-data
      {
        protocol: "Velar",
        asset-id: asset-id,
        spot-price: (get price price-data),
        confidence: (get confidence price-data),
        bitcoin-finality: (get is-finalized price-data),
        leverage-available: (if (get is-finalized price-data) u150 u100),
        liquidity-tier: (if (>= (get confidence price-data) u95) "premium" "standard"),
        dharma-amm-ready: (and (get is-finalized price-data) (>= (get confidence price-data) u90)),
        risk-score: (- u100 (get confidence price-data)),
        last-anchor-block: (get bitcoin-anchor-block price-data),
        security-guarantee: "bitcoin-backed"
      }
    {
      protocol: "Velar",
      asset-id: asset-id,
      spot-price: u0,
      confidence: u0,
      bitcoin-finality: false,
      leverage-available: u100,
      liquidity-tier: "unavailable",
      dharma-amm-ready: false,
      risk-score: u100,
      last-anchor-block: 0x00,
      security-guarantee: "unavailable"
    }
  )
)

(define-read-only (get-hermetica-usdh-data (asset-id (string-ascii 10)))
  (match (map-get? price-feeds asset-id)
    price-data
      (let (
        (stability-factor (get confidence price-data))
        (bitcoin-backing (get validation-score price-data))
        (usdh-rate (if (is-eq asset-id "BTC") 
                     (/ u100000000 (get price price-data))
                     (get price price-data)))
      )
        {
          protocol: "Hermetica",
          asset-id: asset-id,
          usdh-rate: usdh-rate,
          stability-score: stability-factor,
          bitcoin-backing: bitcoin-backing,
          synthetic-ready: (>= stability-factor u92),
          collateral-ratio: (+ u150 (/ bitcoin-backing u10)),
          liquidation-threshold: u125,
          interest-rate: (- u800 (/ bitcoin-backing u25)),
          price-feed-source: "bitcoin-anchored-oracle",
          risk-category: "low-risk"
        }
      )
    {
      protocol: "Hermetica",
      asset-id: asset-id,
      usdh-rate: u0,
      stability-score: u0,
      bitcoin-backing: u0,
      synthetic-ready: false,
      collateral-ratio: u150,
      liquidation-threshold: u125,
      interest-rate: u800,
      price-feed-source: "unavailable",
      risk-category: "high-risk"
    }
  )
)

;; Demo function showing value proposition for partnerships
(define-read-only (get-partnership-demo-data (asset-id (string-ascii 10)))
  (match (map-get? price-feeds asset-id)
    price-data
      (ok {
        ;; Traditional Oracle Comparison
        traditional-oracle: {
          security: "economic-incentives",
          finality: "immediate-but-reversible",
          attack-cost: "bond-value",
          confidence: "reputation-based"
        },
        
        ;; Bitcoin Oracle Advantage
        bitcoin-oracle: {
          security: "bitcoin-hash-power",
          finality: "6-block-bitcoin-confirmation",
          attack-cost: "impossible-at-scale",
          confidence: "mathematical-guarantee"
        },
        
        ;; Current Price Data
        current-data: {
          price: (get price price-data),
          confidence: (get confidence price-data),
          validation-score: (get validation-score price-data),
          bitcoin-anchored: (get is-finalized price-data)
        },
        
        ;; Protocol Benefits
        alex-benefits: "Secure AMM with Bitcoin-grade price feeds",
        velar-benefits: "Leverage with mathematical security guarantees", 
        hermetica-benefits: "Synthetic assets backed by ultimate security",
        
        ;; Partnership Value
        competitive-advantage: "first-bitcoin-anchored-defi-protocols",
        marketing-value: "bitcoin-grade-security-certification",
        user-trust: "mathematically-provable-safety"
      })
    (err "Asset not found")
  )
)

;; Get DeFi protocol statistics
(define-read-only (get-defi-protocol-stats (protocol (string-ascii 10)))
  (map-get? defi-protocol-stats protocol)
)

;; Get oracle operator info
(define-read-only (get-oracle-info (oracle principal))
  (map-get? oracle-operators oracle)
)

;; Get oracle bond status
(define-read-only (get-oracle-bond-status (oracle principal))
  (match (map-get? oracle-operators oracle)
    oracle-data 
      (ok {
        stx-bond: (get stx-bond oracle-data),
        btc-bond: (get btc-bond oracle-data),
        is-bootstrap-oracle: (get is-bootstrap-oracle oracle-data),
        meets-production-requirements: (and
          (>= (get stx-bond oracle-data) MIN_STX_BOND)
          (>= (get btc-bond oracle-data) MIN_BTC_BOND)
        )
      })
    (err ERR_ORACLE_NOT_REGISTERED)
  )
)

;; Check if contract is in bootstrap mode
(define-read-only (is-bootstrap-mode)
  (var-get bootstrap-mode)
)

;; Get minimum oracles required
(define-read-only (get-min-oracles-required)
  (var-get min-oracles-required)
)

;; Health check for the oracle system
(define-read-only (get-system-health)
  {
    total-oracles: (var-get total-oracles),
    current-round: (var-get current-round-id),
    is-paused: (var-get contract-paused),
    is-bootstrap-mode: (var-get bootstrap-mode),
    min-oracles-required: (var-get min-oracles-required),
    min-stx-bond-required: MIN_STX_BOND,
    min-btc-bond-required: MIN_BTC_BOND,
    ready-for-production: (>= (var-get total-oracles) MIN_ORACLES_PRODUCTION),
    demo-mode: (var-get demo-mode),
    total-defi-integrations: (var-get total-defi-integrations)
  }
)